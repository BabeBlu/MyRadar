name,ring,quadrant,isNew,description
Docker,我行引入,技术,FALSE,"<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br />由于其基于LXC的轻量级虚拟化的特点，docker相比KVM之类最明显的特点就是启动快，资源占用小。因此对于构建隔离的标准化的运行环境，轻量级的PaaS(如dokku), 构建自动化测试和持续集成环境，以及一切可以横向扩展的应用(尤其是需要快速启停来应对峰谷的web应用)。<p>"
分布式数据库,我行引入,技术,FALSE,<p>分布式数据库继承了传统单机数据库的核心特性，同时还拥有分布式系统的处理能力，理论上所有需求都能通过横向扩展解决，这是在大数据高并发场景下诞生的一种产物。虽然起步较晚，可以预见的是它将是数据库下一个发展方向。</p>
Kubernetes,我行引入,技术,FALSE,"<p>Kubernetes是Google开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、应用容器化管理。在生产环境中部署一个应用程序时，通常要部署该应用的多个实例以便对应用请求进行负载均衡。</p>
<p>在Kubernetes中，我们可以创建多个容器，每个容器里面运行一个应用实例，然后通过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问，而这些细节都不需要运维人员去进行复杂的手工配置和处理。</p>
<strong>特点</strong> <br /> - 可移植: 支持公有云，私有云，混合云，多重云（multi-cloud）<br /> - 可扩展: 模块化，插件化，可挂载，可组合 <br /> - 自动化: 自动部署，自动重启，自动复制，自动伸缩/扩展"
Infrastructue as Code (IaC),同行试点,技术,FALSE,"<p>基础设施即代码（IaC）是通过代码而非手动流程来管理和置备基础设施的方法。利用 IaC 我们可以创建包含基础设施规范的配置文件，从而便于编辑和分发配置。此外，它还可确保每次置备的环境都完全相同。通过对配置规范进行整理和记录，IaC 有助于实现配置管理，并避免发生未记录的临时配置更改。借助 IaC 实现基础架构置备的自动化，意味着开发人员无需再在每次开发或部署应用时手动置备和管理服务器、操作系统、存储及其他基础架构组件。</p>
服务器自动化和配置管理工具通常可以用来实现 IaC。一些常见的方案如下：<br /> - Chef <br /> - Puppet <br /> - 红帽 Ansible 自动化平台 <br /> - Terraform <br /> - AWS CloudFormation"
Mesos,同行试点,技术,FALSE,"<p>Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核。Mesos最初是由加州大学伯克利分校的AMPLab开发的，后在Twitter得到广泛使用。</p>
<p>Mesos项目可以很容易地实现分布式应用的自动化调度。同时，Mesos自身也很高的结合和主持了Docker等相关容器技术，基于Mesos已有的大量应用框架，可以实现用户应用的快速上线。Mesos可以将整个数据中心的资源（包括CPU、内存、存储、网络等）进行抽象和调度，多个应用同时运行在集群中分享资源，并无需关心资源的分布情况。</p>如果把数据中心中的集群资源看做一台服务器，那么Mesos要做的事情，其实就是操作系统内核的职责：抽象资源+调度任务。"
微服务,同行试点,技术,TRUE,<p>微服务是一种软件开发技术- 面向服务的体系结构（SOA）架构样式的一种变体，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据上下文，选择合适的语言、工具对其进行构建。<p/>
Serverless架构,行业萌芽,技术,TRUE,"<p>Serverless架构是一种云计算模型，其主要思想是让开发人员专注于编写代码和业务逻辑，而无需管理底层基础设施。在Serverless架构中，开发人员只需编写函数代码，然后将其上传到云服务商的Serverless平台中，平台将自动为其处理运行环境、负载均衡、自动缩放等基础设施管理问题。</p>
Serverless架构的优点包括：<br />
1. 节约成本：Serverless架构不需要开发人员自己购买、部署和管理服务器，可以大大降低成本。<br />
2. 弹性扩展：Serverless平台可以自动根据负载情况动态扩展或缩减实例数量，可以帮助开发人员应对高并发场景。<br />
3. 简化部署：Serverless平台可以自动为函数提供运行环境，无需手动配置和部署。<br />
4. 更高的可靠性：Serverless平台具备自动备份、自动修复等功能，可以提高应用程序的可靠性和可用性。<br />
5. 更快的开发速度：Serverless架构可以让开发人员专注于业务逻辑和代码编写，而无需关心底层基础设施，可以提高开发效率。"
边缘计算,行业萌芽,技术,TRUE,"<p>边缘计算是指将计算、存储和网络资源直接放置在接近数据源的边缘位置，以提高数据传输速度、减少延迟和网络拥塞，从而提高应用程序的性能和用户体验。在金融行业，边缘计算可以应用于多个方面，以下是一些示例：</p>
<br /> 1. 提供更快的交易响应时间：在高频交易领域，响应时间是至关重要的。使用边缘计算技术可以在交易所和客户端之间实现低延迟，以提高交易速度和执行能力。 <br /> 2. 数据分析和风险管理：边缘计算可以帮助金融机构更快地处理大量数据，并将数据分析推向数据源，从而提高数据分析的准确性和效率，减少延迟和网络拥塞，加强风险管理。 <br /> 3. ATM网络：边缘计算可以帮助银行更好地管理其ATM网络，提高ATM的可用性和响应时间，降低故障率。 <br /> 4. 安全防御：使用边缘计算可以将网络安全控制推向网络边缘，为金融机构提供更好的安全防御能力，识别和阻止网络攻击。"
Linkerd,行业萌芽,平台,TRUE,"<p>Linkerd是一款开源的服务网格平台，旨在提供一种轻量级、可观察的、可靠的微服务架构解决方案。它基于Envoy代理和Rust编写的控制平面构建，提供了一系列的特性，如可观测性、安全性、流量控制、故障注入和自适应路由等。</p>
Linkerd的主要特点包括：<br />
1. 零配置：Linkerd是一种零配置服务网格，可以无缝地与Kubernetes集群进行集成，对于开发者来说非常友好。<br />
2. 可观察性：Linkerd提供了丰富的监控和追踪功能，可以实时地监控服务的性能指标，帮助开发者快速定位和解决问题。<br />
3. 安全性：Linkerd支持基于TLS的加密通信，可以保障服务之间的安全通信，并提供了多种身份认证和授权机制。<br />
4. 流量控制：Linkerd支持流量控制和负载均衡，可以确保服务之间的流量分配和负载均衡。<br />
5. 故障注入：Linkerd支持故障注入和故障测试，可以帮助开发者测试系统的鲁棒性和可靠性。<br /><br />
Linkerd的主要应用场景包括：<br />
1. 微服务架构：Linkerd是一款专为微服务架构设计的服务网格平台，可以帮助开发者构建可观测的、可靠的微服务架构。<br />
2. 多云环境管理：Linkerd可以无缝地集成到Kubernetes集群中，支持多云环境管理，可以帮助开发者更好地管理多云环境。<br />
3. 安全通信：Linkerd支持基于TLS的加密通信，可以保障服务之间的安全通信，适用于安全性要求较高的应用场景。"
KubeSphere,同行试点,平台,TRUE,<p>KubeSphere 是在 Kubernetes 之上构建的以应用为中心的多租户容器平台，提供全栈的 IT 自动化运维的能力，简化企业的 DevOps 工作流。KubeSphere 提供了运维友好的向导式操作界面，帮助企业快速构建一个强大和功能丰富的容器云平台。</p>
Istio,同行试点,平台,TRUE,"<p>Istio是一个连接，管理和保护微服务的开放平台。Istio提供一种简单的方式来建立已部署的服务的网络，具备负载均衡，服务到服务认证，监控等等功能，而不需要改动任何服务代码。简单的说，有了Istio，你的服务就不再需要任何微服务开发框架（典型如Spring Cloud，Dubbo），也不再需要自己手动实现各种复杂的服务治理功能（很多是Spring Cloud和Dubbo也不能提供的，需要自己动手）。只要服务的客户端和服务端可以进行简单的直接网络访问，就可以通过将网络层委托Istio，从而获得一系列的完备功能。</p>
可以近似的理解为：<br /> Istio = 微服务框架 + 服务治理。"
Azure IoT Edge,行业萌芽,平台,TRUE,"<p>Azure IoT Edge是微软推出的一种边缘计算平台，用于在边缘设备上运行分布式应用程序。它支持在边缘设备上部署和运行Azure云服务的组件，包括IoT Hub、Azure Functions、Azure Stream Analytics、Azure Machine Learning等，同时也支持运行自定义的容器和代码。</p>
Azure IoT Edge的主要特点包括：<br />
1. 灵活性：Azure IoT Edge支持在各种类型的边缘设备上运行，包括嵌入式设备、网关、服务器等，同时也支持在云上管理和监控边缘设备的运行。<br />
2. 安全性：Azure IoT Edge提供了多层次的安全保障，包括硬件安全、软件安全、通信安全等，以保护边缘设备和数据的安全性。<br />
3. 可扩展性：Azure IoT Edge支持通过容器化和模块化的方式，快速扩展和部署边缘计算应用程序，以满足不同的业务需求。<br />
4. 云与边缘协同：Azure IoT Edge能够与Azure云服务紧密集成，支持云与边缘协同工作，以实现更高效的数据处理和业务逻辑。"
Rancher,行业萌芽,平台,TRUE,"<p>Rancher是一款开源的企业级容器管理平台，可以帮助用户轻松地构建、部署和管理容器化应用程序。Rancher提供了一个直观、易用的Web界面，可以方便地管理多个Kubernetes集群，同时支持多种容器编排引擎，包括Kubernetes、Docker Swarm和Mesos。</p>
Rancher的主要特点包括：<br />
1. 多集群管理：Rancher可以管理多个Kubernetes集群，同时也支持其它容器编排引擎，可以方便地进行多集群管理。<br />
2. 多租户支持：Rancher支持多租户模式，可以为不同的用户和团队提供独立的资源和权限管理。<br />
3. 应用程序编排：Rancher支持多种容器编排引擎，可以方便地进行应用程序编排和部署。<br />
4. 自动化运维：Rancher支持自动化运维，可以自动扩缩容、自动恢复和自动升级容器化应用程序。<br />
5. 安全性：Rancher提供了严格的安全措施，包括身份认证、访问控制、加密通信等，可以保障应用程序的安全性。"
Knative,同行试点,平台,FALSE,"<p>Knative是一个开源项目，它基于Kubernetes构建，提供了一组工具和API，用于简化和自动化容器化应用程序的部署和管理。Knative支持在Kubernetes上构建、部署和管理无服务器应用程序，提供了自动扩缩容、自动部署、自动更新等功能，使得应用程序能够更加灵活、可靠、高效地运行。</p>
Knative的主要特点包括：<br />
1. 无服务器：Knative提供了无服务器应用程序的支持，用户只需要关注应用程序的代码，而不必担心底层的基础设施和资源管理。<br />
2. 自动扩缩容：Knative提供了自动扩缩容功能，根据应用程序的负载情况自动调整应用程序的实例数量，以满足不同的访问需求。<br />
3. 自动部署：Knative支持自动部署应用程序，用户只需要将应用程序的代码打包成镜像，并上传到容器仓库，Knative会自动部署和管理应用程序的运行环境。<br />
4. 自动更新：Knative支持自动更新应用程序，当代码库发生变更时，Knative会自动拉取最新的代码，并进行构建和部署。<br />
5. 扩展性：Knative支持自定义扩展和插件，可以根据不同的业务需求扩展Knative的功能和API。"
Docker Swarm,同行试点,平台,FALSE,"<p>Docker Swarm是Docker官方推出的一种容器编排工具，用于管理多个Docker容器的部署和运行。它提供了一种简单、易用、高可用的方式来管理Docker容器集群。Docker Swarm的主要特点包括：<br />
1. 容易使用：与Docker Compose类似，使用Docker Swarm可以使用简单的YAML文件定义服务和容器的部署配置。<br />
2. 高可用：Docker Swarm支持高可用的容器部署和自动容错，能够自动将失败的容器重新部署到其他可用节点。<br />
3. 自动扩缩容：能够自动根据需要调整容器的数量和位置，以满足负载变化的需求。<br />
4. 安全可靠：提供了强大的安全功能，包括TLS加密、RBAC访问控制、密钥管理等，以保护容器和服务的安全性和可靠性。<br />
5. 与Docker集成：Docker Swarm与Docker Engine集成紧密，无需学习新的API或命令，即可管理Docker容器集群。</p>
<p>Docker Swarm的主要应用场景包括：<br />
1. 高可用性应用程序：提供高可用性的容器部署和自动容错，适用于关键业务应用程序的部署。<br />
2. 大规模容器管理：能够自动扩缩容，支持管理大规模容器集群，适用于需要大规模部署和管理容器的场景。<br />
3. 持续集成和持续部署：与持续集成和持续部署工具集成紧密，能够快速、自动地部署应用程序和服务。</p>"
Terraform,同行试点,工具,FALSE,"<p>HashiCorp Terraform是一个IT基础架构自动化编排工具，可以用代码来管理维护IT资源。它编写了描述云资源拓扑的配置文件中的基础结构，例如虚拟机、存储账户和网络接口。Terraform的命令行接口（Command Line Interface，CLI）提供一种简单机制，用于将配置文件部署到阿里云或其他任意支持的云上，并对其进行版本控制。</p>
<p>Terraform适用于多云方案，将相类似的基础结构部署到云提供商或者本地数据中心。开发人员能够使用相同的工具和相似的配置文件同时管理不同云提供商的资源。Terraform能够创建配置文件的模板，以可重复、可预测的方式定义和预配ECS资源，减少人为因素导致的部署和管理错误。能够多次部署同一模板，创建相同的开发、测试和生产环境。</p>"
Ansible,我行引入,工具,FALSE,"<p>Ansible是一种自动化IT工具，它可以自动执行系统配置、应用程序部署、云基础设施配置等任务，从而提高效率和可靠性。Ansible使用基于Python的简单语法来描述执行的任务和计算机配置。与其他自动化工具相比，Ansible的主要特点包括：<br />
1. 简单易用：使用简单的YAML语法描述任务，无需编写复杂的脚本。<br />
2. 无代理：使用SSH协议执行任务，无需在远程主机上安装任何代理或软件。<br />
3. 模块化：Ansible提供了众多模块来执行各种任务，如文件操作、服务管理、软件包安装等。<br />
4. 可扩展：可以使用插件、扩展和定制模块来扩展Ansible的功能。<br />
5. 无中心化：Ansible不需要任何服务器或中心节点，所有任务都可以在本地执行。</p>
<p>Ansible的主要应用场景包括：<br />
1. 服务器配置管理：自动执行服务器配置和管理，如用户管理、文件传输、软件安装等。<br />
2. 应用程序部署：自动化应用程序部署和发布，如代码更新、环境配置、数据库迁移等。<br />
3. 云基础设施管理：自动化云平台上的基础设施管理，如虚拟机创建、负载均衡器配置、安全组管理等。<br />
4. 网络设备管理：自动化网络设备的配置和管理，如路由器、交换机、防火墙等。</p>"
Prometheous,我行引入,工具,FALSE,"<p>Prometheus（中文名：普罗米修斯）是由 SoundCloud 开发的开源监控报警系统和时序列数据库(TSDB)。自2012年起，许多公司及组织已经采用 Prometheus，并且该项目有着非常活跃的开发者和用户社区，现在已经成为一个独立的开源项目。Prometheus 在2016加入 CNCF（Cloud Native Computing Foundation），作为在 kubernetes 之后的第二个由基金会主持的项目。</p>
<p>Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。Prometheus是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。近几年随着k8s的流行，prometheus成为了一个越来越流行的监控工具。</p>"
Grafana,我行引入,工具,FALSE,<p>Grafana是一款用于可视化大型测量数据的开源程序，使用 Grafana 可以非常轻松的将数据转成图表的展现形式来做到数据监控以及数据统计。Grafana一般是和一些时间序列数据库进行配合来展示数据的，例如：Prometheous、Graphite、OpenTSDB、InfluxDB等。</p>
DataDog,同行试点,工具,FALSE,"<p>Datadog是一种云监控和分析工具，可以帮助用户实时监控分布式应用程序、服务和基础设施。它可以收集和分析来自不同来源的数据，包括应用程序、服务器、容器、数据库、网络和日志等数据，从而帮助用户了解应用程序和基础设施的运行状况、性能瓶颈和异常情况。<br />Datadog可以帮助用户监控和分析分布式应用程序和基础设施，提高应用程序的可用性、性能和安全性。它适用于各种规模的企业和应用场景，例如：云原生、容器化、微服务等现代化的应用程序。</p>
Datadog提供了丰富的监控和分析功能，包括：<br />
1. 应用程序性能监控（APM）：可以实时监控应用程序的性能，追踪请求的路径，找到慢请求并诊断错误。<br />
2. 基础设施监控：可以监控云、主机、容器、数据库和网络等基础设施的运行状况和性能，帮助用户了解资源使用情况和问题。<br />
3. 日志管理：可以收集和分析应用程序、系统和业务日志，帮助用户快速诊断问题和异常情况。<br />
4. 实时报警：可以设置和管理实时报警规则，当监控数据超过预设的阈值时，自动发送报警信息给相关团队。<br />
5. 可视化分析：可以将监控数据以图表、仪表盘等形式展示，帮助用户快速了解应用程序和基础设施的状态。<br />"
Helm,我行引入,工具,FALSE,"<p>Helm是一个开源的 Kubernetes 应用程序包管理器，由Helm社区维护。它可以简化 Kubernetes 应用程序的部署、升级和管理，并提供了一种模板化的方式来定义和配置 Kubernetes 资源。<br />使用 Helm，用户可以轻松地管理 Kubernetes 应用程序中的多个资源，例如：Pod、Service、Deployment、ConfigMap 等等。Helm 还提供了一个名为“Chart”的概念，它是一种预定义的应用程序模板，包含了 Kubernetes 资源定义、应用程序配置信息以及其他的相关文档。Chart 可以在不同的环境中重复使用，并且可以通过 Helm 来进行发布、升级和删除。</p>
Helm 的主要特点包括：<br />
1. 简化部署：Helm 可以自动解决依赖关系，并在 Kubernetes 群集上部署应用程序。<br />
2. 管理版本：Helm 可以管理应用程序的多个版本，并提供回滚机制。<br />
3. 模板化配置：Helm 允许用户使用模板来定义和管理应用程序的配置。<br />
4. 应用程序打包：Helm 可以将应用程序和其相关的 Kubernetes 资源打包为一个 Chart。<br />
5. 社区支持：Helm 有一个庞大的社区支持，可以轻松找到 Chart 和解决问题。<br />"
ELK Stack,我行引入,工具,FALSE,"<p>ELK Stack 是一组开源软件的集合，用于实时地处理和可视化大量的日志数据。</p>
ELK Stack 由以下三个软件组成：<br />
1. Elasticsearch：是一个分布式搜索和分析引擎，用于存储和检索数据。它可以快速地搜索和过滤大量的结构化和非结构化数据，如日志、指标、事务等。Elasticsearch 还支持复杂的查询和聚合操作，以及地理空间搜索。<br />
2. Logstash：是一个数据收集和处理引擎，用于将各种来源的数据汇总到一个地方。它支持多种输入、过滤器和输出插件，可以实时地处理和转换数据，如过滤、归档、格式化等。Logstash 通常用于收集和预处理各种类型的日志数据。<br />
3. Kibana：是一个数据可视化工具，用于创建和共享各种类型的图表和仪表盘。它可以直观地展示 Elasticsearch 中的数据，并提供交互式的界面，如搜索、过滤、聚合等。Kibana 还支持实时的数据更新和自定义的可视化。<br />
<p>ELK Stack 通常用于处理和分析日志数据，如服务器日志、应用程序日志、安全事件日志等。它可以帮助用户实时地了解应用程序和系统的运行状况、性能和问题，并通过可视化的方式展示数据。ELK Stack 也可以与其他工具和平台集成，如 Beats、X-Pack、Grafana 等，扩展其功能和应用场景。</p>"
Consul,行业萌芽,工具,TRUE,"<p>Consul是一种开源的服务发现和配置工具，由HashiCorp公司开发。它提供了一种分布式的服务发现机制，可以用于动态的发现和注册服务实例，并提供了一个中心化的配置管理系统，可以对应用程序进行配置管理和修改。Consul的主要功能包括：</p>
<br />1. 服务发现：Consul允许应用程序注册和发现服务实例，它可以根据需要自动更新服务列表，以确保应用程序可以找到可用的服务实例。<br /> 2. 健康检查：Consul可以定期检查服务实例的状态，如果发现某个服务实例出现问题，就可以将其从服务列表中移除，以确保应用程序不会请求到不可用的服务。<br /> 3. 分布式配置：Consul提供了一个中心化的配置管理系统，可以在不重启应用程序的情况下更新应用程序的配置。<br />4. 安全服务通信：Consul可以对服务通信进行安全加密，以确保敏感信息的机密性和完整性。
<p>Consul可以帮助企业在分布式环境下更好地管理和监控服务实例，提高应用程序的可用性和可靠性。由于其灵活性和可扩展性，Consul在云计算、容器化和微服务架构等现代化的应用程序中得到广泛应用。</p>"
HashiCorp Sentinel,行业萌芽,工具,TRUE,<p>HashiCorp 发布了 Sentinel，一种集成在 HashiCorp Enterprise 产品中的嵌入式“策略即代码”（Policy as Code）框架。Sentinel 支持“基于逻辑的细粒度策略决策”，实现了审计的自动化，并在与“IaC”和其它 HashiCorp 平台工具一并工作时，实现在必要时刻执行企业策略、合规策略或安全策略。Sentinel 定义并使用自己的策略语言，该语言在设计上考虑了非编程人员的理解，并提供了多个用例，使得非开发人员也可以成为策略制定者。</p>
OpenFaaS,同行试点,语言和框架,TRUE,"<p>OpenFaaS（Functions as a Service）是一个开源的无服务器框架，可以将函数作为容器运行在Kubernetes或Swarm集群中。OpenFaaS是一种轻量级的无服务器解决方案，可以将任何代码或脚本打包成Docker镜像并部署到OpenFaaS上，然后通过API Gateway触发函数执行。</p>
OpenFaaS的主要特点包括：<br />
1. 开源免费：OpenFaaS是一个开源项目，完全免费，用户可以自由使用、修改和分发。<br />
2. 无服务器：OpenFaaS是一种无服务器解决方案，用户只需要关注函数的代码，无需关心底层的基础设施和资源管理。<br />
3. 可扩展性：OpenFaaS支持自动扩缩容，可以根据应用程序的负载情况自动调整函数的实例数量，以满足不同的访问需求。<br />
4. 多语言支持：OpenFaaS支持多种编程语言，包括Java、Python、Go、Node.js等，用户可以选择自己熟悉的编程语言来开发函数。<br />
5. 应用程序集成：OpenFaaS支持将函数作为微服务来使用，可以与其它应用程序进行集成，构建复杂的应用程序。"